" THIS IS FOR USE WITH spf13-vim "
" my edits to the other file has lines which start with ""

UnBundle 'justinmk/vim-sneak'

colorscheme ir_black
nnoremap <CR> :noh<CR>

" delete some text, then highlight some other text and hit <C-x>. The two sections will be swapped.
vnoremap <C-x> <Esc>`.``gvP``P

"exit visual mode when indenting (back to normal)
"to indent again, just hit '.'
vunmap >
vunmap <

"" \ is the new ,
noremap \ ,

"remove frustration:
noremap Q <Nop>

"give back C-e
unmap <C-e>
map <leader>ee :NERDTreeToggle<CR>:NERDTreeMirror<CR>

"make j and k behave normally
"(without this, relative line numbers and word wrap
"don't make sense together)
nunmap j
nunmap k

set wildignorecase "ignore case in filename completion :)
                   "only works for vim 7.3.107 or something

"tabularize. Align comma with no space on left of comma.
nmap <Leader>a,, :Tabularize /,\zs<CR>
vmap <Leader>a,, :Tabularize /,\zs<CR>

"backspacing removes only one space at a time, not a tab's worth
set softtabstop=0

"stop the cursor from going one past the last char in each line
set ve=""
"stop the cursor from going one past the last char in visual mode
set selection=old


"show all buffers, then select one by typing that number
nnoremap gb :ls<cr>:buffer

"reverse ` and '"
nnoremap ` '
nnoremap ' `

""tab to save
nnoremap <Tab> :w<CR>

""relative and absolute line numbers
autocmd InsertEnter * :set number
autocmd InsertLeave * :set relativenumber

" Takes whatever was last searched for and does
" a find and replace for what you type next
" Useful with the * command
map <leader>r <Esc>:%s/\(<C-r>/\)//g<left><left>
map <leader>R <Esc>:%s/\(<C-r>/\)//gc<left><left><left>"

" Make the word the cursor is on or just after UPPERCASE without leaving
" insert mode using Ctrl b
imap <C-b> <Esc>BgUEEi

" make escape instant; get rid of escape delay"
set ttimeoutlen=10
augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=0
    au InsertLeave * set timeoutlen=1000
augroup END



""The following lines are from Ben's vimrc.local: https://github.com/BenBergman/.spf13-vim-conf/blob/master/.vimrc.local#L138
let nasl_space_errors = 1
autocmd BufNewFile,BufRead *.audit set syntax=xml
autocmd BufNewFile,BufRead *.nasl set filetype=nasl
autocmd BufNewFile,BufRead *.inc set filetype=nasl
autocmd BufNewFile,BufRead *.inc set indentexpr=
autocmd FileType nasl setlocal shiftwidth=2 tabstop=2 expandtab softtabstop=2 colorcolumn=70
autocmd FileType nasl set commentstring=#\ %s

let g:tagbar_type_nasl = {
        \ 'ctagstype' : 'nasl',
        \ 'kinds' : [
                \ 'f:functions',
                \ 'v:variables',
                \ 'g:globals',
        \ ]
\ }

let g:syntastic_nasl_checkers = ['nasl_parse', 'nasl']

function! NamedArgsExpand()
        :s/,\s*/,
/g
        ?(
        :s/(\s*/(
/
        /)
        :s/\s*)/
)/
        normal V%=
        /:
        :Tabularize /:
endfunction
autocmd FileType nasl map <silent> <leader>ne :call NamedArgsExpand()<CR>

""Quickly add a semicolon to the end of the current line;
autocmd FileType nasl map <silent> <leader>; mpA;<Esc>`p
